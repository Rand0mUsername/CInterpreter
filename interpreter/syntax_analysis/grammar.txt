
                program                     : declarations

                declarations                : (include_library | function_declaration | declaration)*

                include_library             : HASH ID<'include'> LESS_THAN ID DOT ID<'h'> GREATER_THAN

                function_declaration        : decl_type_spec ID LPAREN parameters RPAREN compound_statement

                parameters                  : decl_type_spec variable (COMMA decl_type_spec variable)*

                function_body               : LBRACKET (declaration | statement)* RBRACKET





                declaration                 : struct_declaration
                                            | var_declaration

                var_declaration             : decl_type_spec init_declarator_list SEMICOLON
                init_declarator_list        : init_declarator (COMMA init_declarator)*
                init_declarator             : variable (ASSIGN assignment_expression)?

                struct_declaration          : STRUCT ID LBRACKET struct_field_declaration* RBRACKET SEMICOLON
                struct_field_declaration    : decl_type_spec struct_declarator_list SEMICOLON
                struct_declarator_list      : variable (COMMA variable)*







                statement                   : iteration_statement
                                            | selection_statement
                                            | jump_statement
                                            | switch_statement
                                            | compound_statement
                                            | expression_statement


                compound_statement          : LBRACKET (declaration | statement)* RBRACKET

                switch_case                 : CASE expression COLON
                                            | DEFAULT COLON

                iteration_statement         : WHILE LPAREN expression RPAREN statement
                                            | DO statement WHILE LPAREN expression RPAREN SEMICOLON
                                            | FOR LPAREN expression_statement expression_statement (expression)? RPAREN statement

                selection_statement         : IF LPAREN expression RPAREN statement (ELSE statement)?
                                            | SWITCH LPAREN expression RPAREN LBRACKET (declaration | statement | switch_case)* RBRACKET

                jump_statement              : RETURN expression? SEMICOLON
                                            | BREAK SEMICOLON
                                            | CONTINUE SEMICOLON

                expression_statement        : expression* SEMICOLON

                expression                  : assignment_expression (COMMA assignment_expression)*

                assignment_expression       : primary_expression (assign_token assignment_expression)*
                                            | conditional_expression

                assign_token                :  ASSIGN | MUL_ASSIGN | DIV_ASSIGN | MOD_ASSIGN
                                             | ADD_ASSIGN | SUB_ASSIGN | LEFT_ASSIGN | RIGHT_ASSIGN
                                             | AND_ASSIGN | XOR_ASSIGN | OR_ASSIGN

                conditional_expression      : logical_and_expression (QUESTION_MARK expression COLON conditional_expression)?

                logical_and_expression      : logical_or_expression (LOG_AND_OP logical_or_expression)*

                logical_or_expression       : inclusive_or_expression (LOG_OR_OP inclusive_or_expression)*

                inclusive_or_expression     : exclusive_or_expression (OR_OP exclusive_or_expression)*

                exclusive_or_expression     : and_expression (XOR_OP and_expression)*

                and_expression              : equality_expression (AMPERSAND equality_expression)*

                equality_expression         : relational_expression ((EQ_OP | NE_OP) relational_expression)*

                relational_expression       : shift_expression ((LE_OP | LT_OP | GE_OP | GT_OP) shift_expression)*

                shift_expression            : additive_expression ((LEFT_OP | RIGHT_OP) additive_expression)*

                additive_expression         : multiplicative_expression ((PLUS | MINUS) multiplicative_expression)*

                multiplicative_expression   : cast_expression ((ASTERISK | DIV_OP | MOD_OP) cast_expression)*

                cast_expression             : LPAREN decl_type_spec RPAREN cast_expression
                                            | unary_expression

                unary_expression            : INC_OP primary_expression
                                            | DEC_OP primary_expression
                                            | AMPERSAND cast_expression
                                            | ASTERISK cast_expression
                                            | PLUS cast_expression
                                            | MINUS cast_expression
                                            | LOG_NEG cast_expression
                                            | postfix_expression

                postfix_expression          : primary_expression INC_OP
                                            | primary_expression DEC_OP
                                            | primary_expression DOT ID
                                            | primary_expression LPAREN argument_expression_list? RPAREN

                argument_expression_list    : assignment_expression (COMMA assignment_expression)*

                primary_expression          : LPAREN expression RPAREN (DOT ID)?
                                            | constant
                                            | string
                                            | variable
                                            | ASTERISK? variable
                                            | ID DOT ID
                                            | ID ARROW ID

                constant                    : INTEGER_CONST
                                            | REAL_CONST

                decl_type_spec              : type_spec+ ASTERISK?
                                            | STRUCT ID ASTERISK?

                type_spec                   : SHORT
                                            | LONG
                                            | SIGNED
                                            | UNSIGNED
                                            | CHAR
                                            | INT
                                            | FLOAT
                                            | DOUBLE

                variable                    : ID

                string                      : STRING
